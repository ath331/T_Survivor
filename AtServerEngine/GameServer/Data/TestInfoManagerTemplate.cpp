////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief TestInfoManagerTemplate class
////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma once
#include "pch.h"
#include <iostream>
#include "TestInfoManagerTemplate.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief GetInfo
////////////////////////////////////////////////////////////////////////////////////////////////////
const TestInfo* TestInfoManagerTemplate::GetInfo( AtInt32 id )
{
	auto iter = m_infoMap.find( id );
	if ( iter == m_infoMap.end() )
		return nullptr;

	return &(iter->second);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief AddInfo
////////////////////////////////////////////////////////////////////////////////////////////////////
AtBool TestInfoManagerTemplate::_AddInfo(
	    AtInt32 id,
	    Protocol::EActorType type,
	    AtString string )
{
	auto iter = m_infoMap.find( id );
	if ( iter != m_infoMap.end() )
		return false;

	TestInfo info = TestInfo(
	    id,
	    type,
	    string );

	m_infoMap[ id ] = info;

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Initialize
////////////////////////////////////////////////////////////////////////////////////////////////////
AtBool TestInfoManagerTemplate::_Initialize()
{
	INFO_LOG( "TestInfoManager Initialize()" );
	if ( !_AddInfo( 0, Protocol::EActorType::None, "가나다" ) ) return false;
	if ( !_AddInfo( 2, Protocol::EActorType::Npc, "아자차" ) ) return false;

	return true;
}