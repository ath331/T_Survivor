////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif WaitingRoom File
////////////////////////////////////////////////////////////////////////////////////////////////////


#include "pch.h"
#include "WaitingRoom.h"
#include "Packet/Protocol.pb.h"
#include "Session/GameSession.h"
#include "Packet/Handler/ClientPacketHandler.h"
#include "Logic/Object/Actor/Player/Player.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
WaitingRoom::WaitingRoom(
	AtInt32  maxUserCount,
	AtString name,
	AtInt32  pw )
	:
	m_maxUserCount( maxUserCount ),
	m_name( name ),
	m_pw( pw )
{
	m_isPrivate = false;

	if ( 0 < pw )
		m_isPrivate = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 룸을 업데이트한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
AtVoid WaitingRoom::UpdateTick()
{
	Room::UpdateTick();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 정보를 내보낸다.
////////////////////////////////////////////////////////////////////////////////////////////////////
AtVoid WaitingRoom::ExportTo( Protocol::RoomInfo& roomInfo )
{
	roomInfo.set_num      ( GetRoomNum()     );
	roomInfo.set_name     ( m_name           );
	roomInfo.set_pw       ( m_pw             );
	roomInfo.set_cur_count( GetPlayerCount() );
	roomInfo.set_max_count( m_maxUserCount   );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 방에 입장할 수 있는지 확인한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
AtBool WaitingRoom::CheckEnterRoom() const
{
	if ( m_maxUserCount <= GetPlayerCount() )
		return false;

	return true;
}
