// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum EObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_ACTOR = 1,
  OBJECT_TYPE_PROJECTILE = 2,
  OBJECT_TYPE_ENV = 3,
  EObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EObjectType_IsValid(int value);
constexpr EObjectType EObjectType_MIN = OBJECT_TYPE_NONE;
constexpr EObjectType EObjectType_MAX = OBJECT_TYPE_ENV;
constexpr int EObjectType_ARRAYSIZE = EObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EObjectType_descriptor();
template<typename T>
inline const std::string& EObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EObjectType_descriptor(), enum_t_value);
}
inline bool EObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EObjectType>(
    EObjectType_descriptor(), name, value);
}
enum EActorType : int {
  None = 0,
  Player = 1,
  Monster = 2,
  Npc = 3,
  EActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EActorType_IsValid(int value);
constexpr EActorType EActorType_MIN = None;
constexpr EActorType EActorType_MAX = Npc;
constexpr int EActorType_ARRAYSIZE = EActorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActorType_descriptor();
template<typename T>
inline const std::string& EActorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EActorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EActorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EActorType_descriptor(), enum_t_value);
}
inline bool EActorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EActorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EActorType>(
    EActorType_descriptor(), name, value);
}
enum EBagType : int {
  BagTypeNone = 0,
  Equipment = 1,
  Etc = 2,
  Useable = 3,
  BagTypeMax = 4,
  EBagType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EBagType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EBagType_IsValid(int value);
constexpr EBagType EBagType_MIN = BagTypeNone;
constexpr EBagType EBagType_MAX = BagTypeMax;
constexpr int EBagType_ARRAYSIZE = EBagType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBagType_descriptor();
template<typename T>
inline const std::string& EBagType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBagType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBagType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBagType_descriptor(), enum_t_value);
}
inline bool EBagType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBagType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBagType>(
    EBagType_descriptor(), name, value);
}
enum EPlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_KNIGHT = 1,
  PLAYER_TYPE_MAGE = 2,
  PLAYER_TYPE_ARCHER = 3,
  EPlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EPlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EPlayerType_IsValid(int value);
constexpr EPlayerType EPlayerType_MIN = PLAYER_TYPE_NONE;
constexpr EPlayerType EPlayerType_MAX = PLAYER_TYPE_ARCHER;
constexpr int EPlayerType_ARRAYSIZE = EPlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerType_descriptor();
template<typename T>
inline const std::string& EPlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPlayerType_descriptor(), enum_t_value);
}
inline bool EPlayerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPlayerType>(
    EPlayerType_descriptor(), name, value);
}
enum EMoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MOVE_STATE_JUMP = 3,
  MOVE_STATE_SKILL = 4,
  EMoveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMoveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMoveState_IsValid(int value);
constexpr EMoveState EMoveState_MIN = MOVE_STATE_NONE;
constexpr EMoveState EMoveState_MAX = MOVE_STATE_SKILL;
constexpr int EMoveState_ARRAYSIZE = EMoveState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMoveState_descriptor();
template<typename T>
inline const std::string& EMoveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMoveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMoveState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMoveState_descriptor(), enum_t_value);
}
inline bool EMoveState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMoveState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMoveState>(
    EMoveState_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::EObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EObjectType>() {
  return ::Protocol::EObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EActorType>() {
  return ::Protocol::EActorType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EBagType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EBagType>() {
  return ::Protocol::EBagType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EPlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EPlayerType>() {
  return ::Protocol::EPlayerType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EMoveState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EMoveState>() {
  return ::Protocol::EMoveState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
