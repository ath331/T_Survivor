// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
}  // namespace Protocol
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*\\\n\013EResultCode\022\027\n"
  "\023RESULT_CODE_SUCCESS\020\000\022\037\n\033RESULT_CODE_FA"
  "IL_ROOM_ENTER\020\001\022\023\n\017RESULT_CODE_MAX\020\002*\200\001\n"
  "\013EObjectType\022\024\n\020OBJECT_TYPE_NONE\020\000\022\025\n\021OB"
  "JECT_TYPE_ACTOR\020\001\022\032\n\026OBJECT_TYPE_PROJECT"
  "ILE\020\002\022\023\n\017OBJECT_TYPE_ENV\020\003\022\023\n\017OBJECT_TYP"
  "E_MAX\020\004*x\n\nEActorType\022\023\n\017ACTOR_TYPE_NONE"
  "\020\000\022\025\n\021ACTOR_TYPE_PLAYER\020\001\022\026\n\022ACTOR_TYPE_"
  "MONSTER\020\002\022\022\n\016ACTOR_TYPE_NPC\020\003\022\022\n\016ACTOR_T"
  "YPE_MAX\020\004*o\n\010EBagType\022\021\n\rBAG_TYPE_NONE\020\000"
  "\022\026\n\022BAG_TYPE_EQUIPMENT\020\001\022\020\n\014BAG_TYPE_ETC"
  "\020\002\022\024\n\020BAG_TYPE_USEABLE\020\003\022\020\n\014BAG_TYPE_MAX"
  "\020\004*~\n\013EPlayerType\022\024\n\020PLAYER_TYPE_NONE\020\000\022"
  "\026\n\022PLAYER_TYPE_KNIGHT\020\001\022\024\n\020PLAYER_TYPE_M"
  "AGE\020\002\022\026\n\022PLAYER_TYPE_ARCHER\020\003\022\023\n\017PLAYER_"
  "TYPE_MAX\020\004*u\n\nEMoveState\022\023\n\017MOVE_STATE_N"
  "ONE\020\000\022\023\n\017MOVE_STATE_IDLE\020\001\022\022\n\016MOVE_STATE"
  "_RUN\020\002\022\023\n\017MOVE_STATE_JUMP\020\003\022\024\n\020MOVE_STAT"
  "E_SKILL\020\004*\355\001\n\016EEquipSlotType\022\030\n\024EQUIP_SL"
  "OT_TYPE_NONE\020\000\022\032\n\026EQUIP_SLOT_TYPE_WEAPON"
  "\020\001\022\036\n\032EQUIP_SLOT_TYPE_SUB_WEAPON\020\002\022\032\n\026EQ"
  "UIP_SLOT_TYPE_HELMAT\020\003\022\031\n\025EQUIP_SLOT_TYP"
  "E_ARMOR\020\004\022\032\n\026EQUIP_SLOT_TYPE_GLOVES\020\005\022\031\n"
  "\025EQUIP_SLOT_TYPE_BOOTS\020\006\022\027\n\023EQUIP_SLOT_T"
  "YPE_MAX\020\007*\212\001\n\005EStat\022\r\n\tSTAT_NONE\020\000\022\021\n\rST"
  "AT_STRENGTH\020\001\022\013\n\007STAT_HP\020\002\022\013\n\007STAT_MP\020\003\022"
  "\020\n\014STAT_DEFENSE\020\004\022\016\n\nSTAT_SPEED\020\005\022\025\n\021STA"
  "T_INTELLIGENCE\020\006\022\014\n\010STAT_MAX\020\007*g\n\023EAnima"
  "tionParamType\022\030\n\024ANIM_PARAM_TYPE_BOOL\020\000\022"
  "\031\n\025ANIM_PARAM_TYPE_FLOAT\020\001\022\033\n\027ANIM_PARAM"
  "_TYPE_TRIGGER\020\002B\013\252\002\010Protocolb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Enum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto = {
  false, false, 1236, descriptor_table_protodef_Enum_2eproto, "Enum.proto", 
  &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
  nullptr, file_level_enum_descriptors_Enum_2eproto, file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool EResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool EObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool EActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBagType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool EBagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool EPlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMoveState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool EMoveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EEquipSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool EEquipSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool EStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAnimationParamType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[8];
}
bool EAnimationParamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
