////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif Monster class
////////////////////////////////////////////////////////////////////////////////////////////////////


#include "pch.h"
#include "Monster.h"
#include "Logic/AI/AI.h"
#include "Data/Monster/MonsterInfoManager.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
Monster::Monster( AtInt32 monsterInfoId, AtInt32 aIInfoId )
	:
	m_monsterInfo( MonsterInfoManager::GetInstance().GetInfo( monsterInfoId ) )
{
	m_actorType = Protocol::EActorType::ACTOR_TYPE_MONSTER;

	// TODO : AI 정보 식별자를 가지고 데이터를 어떻게 가져올건지 수정하기
	if ( aIInfoId )
		m_ai = new AI();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
Monster::~Monster()
{
	if ( m_ai )
		delete m_ai;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 몬스터 정보를 반환한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
const MonsterInfo* Monster::GetInfo()
{
	if ( m_monsterInfo )
		return m_monsterInfo;

	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @breif 업데이트
////////////////////////////////////////////////////////////////////////////////////////////////////
AtVoid Monster::Update()
{
	if ( m_ai )
		m_ai->Update( this );
}
